
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002ea  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000080  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00000e5b  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000c6b  00000000  00000000  00001217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000046d  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000000a8  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000482  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000bf  00000000  00000000  0000281a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00000152  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000013  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1

000000ba <.Loc.1>:
  ba:	a0 e0       	ldi	r26, 0x00	; 0

000000bc <.Loc.2>:
  bc:	b1 e0       	ldi	r27, 0x01	; 1

000000be <.Loc.3>:
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.Loc.5>

000000c0 <.Loc.4>:
  c0:	1d 92       	st	X+, r1

000000c2 <.Loc.5>:
  c2:	a2 30       	cpi	r26, 0x02	; 2

000000c4 <.Loc.6>:
  c4:	b2 07       	cpc	r27, r18

000000c6 <.Loc.7>:
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.Loc.4>

000000c8 <L0^A>:
  c8:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  cc:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <async_debounce>:
#include <stdint.h>
void async_debounce(uint8_t volatile *port, uint8_t pin, int8_t *counter)
{
  d4:	dc 01       	movw	r26, r24
  d6:	fa 01       	movw	r30, r20

000000d8 <.Loc.2>:
  int val = ((*port) & (1 << pin));
  d8:	8c 91       	ld	r24, X

000000da <.Loc.4>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.L2^B1>

000000e0 <.L1^B1>:
  e0:	22 0f       	add	r18, r18

000000e2 <.L2^B1>:
  e2:	6a 95       	dec	r22
  e4:	ea f7       	brpl	.-6      	; 0xe0 <.L1^B1>

000000e6 <.Loc.6>:
  e6:	82 23       	and	r24, r18

000000e8 <.Loc.7>:
  *counter += 2*val - 1;
  e8:	88 0f       	add	r24, r24
  ea:	90 81       	ld	r25, Z
  ec:	91 50       	subi	r25, 0x01	; 1
  ee:	89 0f       	add	r24, r25
  f0:	80 83       	st	Z, r24

000000f2 <.Loc.8>:

}
  f2:	08 95       	ret

000000f4 <delay_debounce>:
#include "delay_cycles.h"

int button_press = 0;
int
delay_debounce(uint8_t volatile *port, uint8_t pin, uint16_t cycles)
{
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
  fc:	16 2f       	mov	r17, r22
  fe:	ca 01       	movw	r24, r20

00000100 <.Loc.2>:

  // check button value once
  if(!bit_is_set(*port, pin)) {
 100:	28 81       	ld	r18, Y
 102:	30 e0       	ldi	r19, 0x00	; 0

00000104 <.Loc.4>:
 104:	02 c0       	rjmp	.+4      	; 0x10a <.L2^B1>

00000106 <.L1^B1>:
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18

0000010a <.L2^B1>:
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <.L1^B1>

0000010e <.Loc.5>:
 10e:	20 95       	com	r18
 110:	30 95       	com	r19
 112:	21 70       	andi	r18, 0x01	; 1
 114:	33 27       	eor	r19, r19

00000116 <.Loc.6>:
    button_press = 1;
 116:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <button_press+0x1>
 11a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <button_press>

0000011e <.Loc.7>:
  }
  else {
    button_press = 0;
  }
  delay_cycles(cycles);
 11e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay_cycles>

00000122 <.LVL2>:
  // check value again, if same, return 0
  if(bit_is_set(*port, pin) && button_press == 1) {
 122:	28 81       	ld	r18, Y
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <.L2^B2>

00000128 <.L1^B2>:
 128:	35 95       	asr	r19
 12a:	27 95       	ror	r18

0000012c <.L2^B2>:
 12c:	1a 95       	dec	r17
 12e:	e2 f7       	brpl	.-8      	; 0x128 <.L1^B2>
 130:	82 2f       	mov	r24, r18
 132:	81 70       	andi	r24, 0x01	; 1
 134:	99 27       	eor	r25, r25

00000136 <.Loc.10>:
 136:	20 ff       	sbrs	r18, 0
 138:	0b c0       	rjmp	.+22     	; 0x150 <.L1>

0000013a <.Loc.11>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <button_press>
 140:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <button_press+0x1>
 144:	41 30       	cpi	r20, 0x01	; 1
 146:	51 05       	cpc	r21, r1
 148:	09 f0       	breq	.+2      	; 0x14c <.L3>
 14a:	20 e0       	ldi	r18, 0x00	; 0

0000014c <.L3>:
 14c:	82 2f       	mov	r24, r18
 14e:	90 e0       	ldi	r25, 0x00	; 0

00000150 <.L1>:
    return 1;
  }
  return 0;
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28

00000154 <.Loc.13>:
 154:	1f 91       	pop	r17

00000156 <.Loc.14>:
 156:	08 95       	ret

00000158 <shift_debounce>:
#include <stdint.h>
#include <avr/io.h>

int
shift_debounce(uint8_t volatile *port, uint8_t pin)
{
 158:	fc 01       	movw	r30, r24

0000015a <.Loc.2>:
  uint16_t shift_reg = 0x0055;
  int i;
  for(i = 0; i < 16; i++) {
    shift_reg = (shift_reg << 1) | !bit_is_set(*port, pin);
 15a:	a6 2f       	mov	r26, r22
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <.L2^B1>

00000162 <.L1^B1>:
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21

00000166 <.L2^B1>:
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <.L1^B1>
 16a:	20 e1       	ldi	r18, 0x10	; 16
 16c:	30 e0       	ldi	r19, 0x00	; 0

0000016e <.Loc.7>:
  uint16_t shift_reg = 0x0055;
 16e:	85 e5       	ldi	r24, 0x55	; 85
 170:	90 e0       	ldi	r25, 0x00	; 0

00000172 <.Loc.8>:
 172:	0b c0       	rjmp	.+22     	; 0x18a <.L5>

00000174 <.L2>:

    if(shift_reg == 0xFFFF && !bit_is_set(*port, pin)) {
      return 1;
    }
    else if(shift_reg == 0x0000 && bit_is_set(*port, pin)) {
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	31 f4       	brne	.+12     	; 0x184 <.L4>

00000178 <.Loc.11>:
 178:	60 81       	ld	r22, Z
 17a:	70 e0       	ldi	r23, 0x00	; 0

0000017c <.Loc.12>:
 17c:	64 23       	and	r22, r20
 17e:	75 23       	and	r23, r21
 180:	67 2b       	or	r22, r23
 182:	19 f5       	brne	.+70     	; 0x1ca <.L7>

00000184 <.L4>:
  for(i = 0; i < 16; i++) {
 184:	21 50       	subi	r18, 0x01	; 1
 186:	30 40       	sbci	r19, 0x00	; 0
 188:	e9 f0       	breq	.+58     	; 0x1c4 <.L10>

0000018a <.L5>:
    shift_reg = (shift_reg << 1) | !bit_is_set(*port, pin);
 18a:	bc 01       	movw	r22, r24
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23

00000190 <.Loc.17>:
 190:	80 81       	ld	r24, Z
 192:	90 e0       	ldi	r25, 0x00	; 0

00000194 <.Loc.18>:
 194:	0a 2e       	mov	r0, r26
 196:	02 c0       	rjmp	.+4      	; 0x19c <.L2^B2>

00000198 <.L1^B2>:
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24

0000019c <.L2^B2>:
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <.L1^B2>
 1a0:	80 95       	com	r24
 1a2:	90 95       	com	r25
 1a4:	81 70       	andi	r24, 0x01	; 1
 1a6:	99 27       	eor	r25, r25

000001a8 <.Loc.19>:
 1a8:	86 2b       	or	r24, r22
 1aa:	97 2b       	or	r25, r23

000001ac <.Loc.20>:
    if(shift_reg == 0xFFFF && !bit_is_set(*port, pin)) {
 1ac:	8f 3f       	cpi	r24, 0xFF	; 255
 1ae:	98 07       	cpc	r25, r24
 1b0:	09 f7       	brne	.-62     	; 0x174 <.L2>

000001b2 <.Loc.22>:
 1b2:	60 81       	ld	r22, Z
 1b4:	70 e0       	ldi	r23, 0x00	; 0

000001b6 <.Loc.23>:
 1b6:	64 23       	and	r22, r20
 1b8:	75 23       	and	r23, r21
 1ba:	67 2b       	or	r22, r23
 1bc:	19 f7       	brne	.-58     	; 0x184 <.L4>

000001be <.Loc.24>:
      return 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0

000001c2 <.Loc.25>:
 1c2:	08 95       	ret

000001c4 <.L10>:
      return 0;
    }
  }

  return -1;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	9f ef       	ldi	r25, 0xFF	; 255

000001c8 <.Loc.27>:
 1c8:	08 95       	ret

000001ca <.L7>:
      return 0;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0

000001ce <.Loc.29>:
}
 1ce:	08 95       	ret

000001d0 <delay_cycles>:
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	91 09       	sbc	r25, r1
 1d4:	81 15       	cp	r24, r1
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <delay_cycles>
 1d8:	91 15       	cp	r25, r1
 1da:	d1 f7       	brne	.-12     	; 0x1d0 <delay_cycles>
 1dc:	08 95       	ret

000001de <main>:
#include "shift_debounce.h"
#include "async_debounce.h"

int
main()
{
 1de:	0f 92       	push	r0
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62

000001e4 <.Loc.1>:
  /* Set up Port B for LED output */
  DDRB = 0xff;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	84 b9       	out	0x04, r24	; 4

000001e8 <.Loc.3>:
  PORTB = 0x00;
 1e8:	15 b8       	out	0x05, r1	; 5

000001ea <.Loc.5>:

  /* Set up Port D for Input */
  DDRD = 0x00;
 1ea:	1a b8       	out	0x0a, r1	; 10

000001ec <.Loc.7>:
  PORTD = 0xff; /* Pull-up pins */
 1ec:	8b b9       	out	0x0b, r24	; 11

000001ee <.LVL0>:

  int8_t pd6_cnt = 0;
  uint8_t pd6_state = 0;
 1ee:	10 e0       	ldi	r17, 0x00	; 0

000001f0 <.Loc.12>:
  for (;;) {


    if(delay_debounce(&PIND, 4, 10000)) {
      PORTB ^= (1<<3);
 1f0:	08 e0       	ldi	r16, 0x08	; 8

000001f2 <.L8>:
  int8_t pd6_cnt = 0;
 1f2:	19 82       	std	Y+1, r1	; 0x01

000001f4 <.Loc.14>:
    if(delay_debounce(&PIND, 4, 10000)) {
 1f4:	40 e1       	ldi	r20, 0x10	; 16
 1f6:	57 e2       	ldi	r21, 0x27	; 39
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	89 e2       	ldi	r24, 0x29	; 41
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <delay_debounce>

00000202 <.LVL3>:
 202:	89 2b       	or	r24, r25
 204:	19 f0       	breq	.+6      	; 0x20c <.L2>

00000206 <.Loc.18>:
      PORTB ^= (1<<3);
 206:	85 b1       	in	r24, 0x05	; 5

00000208 <.Loc.19>:
 208:	80 27       	eor	r24, r16
 20a:	85 b9       	out	0x05, r24	; 5

0000020c <.L2>:
    }



    if(shift_debounce(&PIND, 5)) {
 20c:	65 e0       	ldi	r22, 0x05	; 5
 20e:	89 e2       	ldi	r24, 0x29	; 41
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 ac 00 	call	0x158	; 0x158 <shift_debounce>

00000216 <.LVL4>:
 216:	89 2b       	or	r24, r25
 218:	21 f0       	breq	.+8      	; 0x222 <.L3>

0000021a <.Loc.23>:
      PORTB ^= (1<<2);
 21a:	85 b1       	in	r24, 0x05	; 5

0000021c <.Loc.24>:
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	89 27       	eor	r24, r25
 220:	85 b9       	out	0x05, r24	; 5

00000222 <.L3>:
    }


    async_debounce(&PIND, 6, &pd6_cnt);
 222:	ae 01       	movw	r20, r28
 224:	4f 5f       	subi	r20, 0xFF	; 255
 226:	5f 4f       	sbci	r21, 0xFF	; 255
 228:	66 e0       	ldi	r22, 0x06	; 6
 22a:	89 e2       	ldi	r24, 0x29	; 41
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 6a 00 	call	0xd4	; 0xd4 <async_debounce>

00000232 <.LVL5>:
    if (pd6_cnt > 32 && pd6_state == 0) {
 232:	89 81       	ldd	r24, Y+1	; 0x01

00000234 <.Loc.28>:
 234:	81 32       	cpi	r24, 0x21	; 33
 236:	3c f0       	brlt	.+14     	; 0x246 <.L4>

00000238 <.Loc.29>:
 238:	11 11       	cpse	r17, r1
 23a:	03 c0       	rjmp	.+6      	; 0x242 <.L5>

0000023c <.Loc.30>:
      pd6_state = 1;
      PORTB ^= (1<<7);
 23c:	85 b1       	in	r24, 0x05	; 5

0000023e <.Loc.32>:
 23e:	80 58       	subi	r24, 0x80	; 128
 240:	85 b9       	out	0x05, r24	; 5

00000242 <.L5>:
      pd6_state = 1;
 242:	11 e0       	ldi	r17, 0x01	; 1
 244:	d6 cf       	rjmp	.-84     	; 0x1f2 <.L8>

00000246 <.L4>:
    } else if (pd6_cnt < 32 && pd6_state == 1) {
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	80 32       	cpi	r24, 0x20	; 32
 24a:	09 f0       	breq	.+2      	; 0x24e <.L7>
 24c:	90 e0       	ldi	r25, 0x00	; 0

0000024e <.L7>:
 24e:	19 23       	and	r17, r25

00000250 <.Loc.36>:
    if(delay_debounce(&PIND, 4, 10000)) {
 250:	d0 cf       	rjmp	.-96     	; 0x1f2 <.L8>

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
